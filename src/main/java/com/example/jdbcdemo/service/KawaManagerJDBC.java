package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Kawa;

public class KawaManagerJDBC implements KawaManager{

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableKawa = "CREATE TABLE Kawa(id bigint GENERATED BY DEFAULT AS IDENTITY, nazwa varchar(20) UNIQUE, cena double, stan INTEGER)";

	private PreparedStatement addKawaStmt;
	private PreparedStatement deleteAllKawasStmt;
	private PreparedStatement getAllKawasStmt;

	private Statement statement;

	public KawaManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Kawa".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableKawa);

			addKawaStmt = connection
					.prepareStatement("INSERT INTO Kawa (nazwa, cena, stan) VALUES (?, ?, ?)");
			deleteAllKawasStmt = connection
					.prepareStatement("DELETE FROM Kawa");
			getAllKawasStmt = connection
					.prepareStatement("SELECT id, nazwa, cena, stan FROM Kawa");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearKawas() {
		try {
			deleteAllKawasStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addKawa(Kawa kawa) {
		int count = 0;
		try {
			addKawaStmt.setString(1, kawa.getNazwa());
			addKawaStmt.setDouble(2, kawa.getCena());
			addKawaStmt.setInt(3, kawa.getStan());

			count = addKawaStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<Kawa> getAllKawas() {
		List<Kawa> kawas = new ArrayList<Kawa>();

		try {
			ResultSet rs = getAllKawasStmt.executeQuery();

			while (rs.next()) {
				Kawa p = new Kawa();
				p.setId(rs.getInt("id"));
				p.setNazwa(rs.getString("nazwa"));
				p.setCena(rs.getDouble("cena"));
				p.setStan(rs.getInt("stan"));
				kawas.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return kawas;
	}

	public void addAllKawas(List<Kawa> kawas) {
			try {
				connection.setAutoCommit(false);
				for(Kawa kawa : kawas){
					addKawaStmt.setString(1, kawa.getNazwa());
					addKawaStmt.setDouble(2, kawa.getCena());
					addKawaStmt.setInt(3, kawa.getStan());
					addKawaStmt.executeUpdate();
				}
				connection.commit();
	
			} catch (SQLException exception) {
				try{
					connection.rollback();
				} catch (SQLException e){
					e.printStackTrace();
				}
			}
	}

}